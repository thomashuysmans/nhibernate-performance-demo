using NHibernate;
using NHibernatePerformanceDemo.Host.Entities;
using System;
using System.Diagnostics;


namespace NHibernatePerformanceDemo.Host
{
    public class InsertSimulatorStateless
    {
        private const int AmountOfInserts = 10000;
        private ISessionFactory _sessionFactory;

        public InsertSimulatorStateless(ISessionFactory sessionFactory)
        {
            _sessionFactory = sessionFactory;
        }

        public void Simulate()
        {
            var stopWatch = new Stopwatch();

            InsertProductWithIdGeneratedByDatabase(_sessionFactory, stopWatch);
            stopWatch.Reset();

            InsertProductWithHiLo(_sessionFactory, stopWatch);
            stopWatch.Reset();

            InsertProductWithGuidId(_sessionFactory, stopWatch);
        }

        private void UpdateAProduct()
        {
            using (var session = _sessionFactory.OpenSession())
            using (var transaction = session.BeginTransaction(System.Data.IsolationLevel.ReadCommitted))
            {
                var product = session.Get<Product>(1);
                product.Name = "other name";
                transaction.Commit();
            }
        }

        private static void InsertProductWithHiLo(ISessionFactory sessionFactory, System.Diagnostics.Stopwatch stopWatch)
        {
            Console.WriteLine("Start executing insert product with HiLo");

            stopWatch.Start();

            using (var session = sessionFactory.OpenStatelessSession())
            using (var transaction = session.BeginTransaction(System.Data.IsolationLevel.ReadCommitted))
            {

                for (var i = 0; i < AmountOfInserts; i++)
                {
                    var product = new ProductWithHiLo()
                    {
                        Name = "A very long productname",
                        Description = "A very long description of a product with a very long name",
                        Price = 22,
                        Category = "Books"
                    };
                    session.Insert(product);
                }

                transaction.Commit();
            }

            stopWatch.Stop();
            var result = stopWatch.ElapsedMilliseconds;
            Console.WriteLine("Total time (in milliseconds) for executing query: " + result);
        }


        private static void InsertProductWithGuidId(ISessionFactory sessionFactory, Stopwatch stopWatch)
        {
            Console.WriteLine("Start executing insert product with guid id");

            stopWatch.Start();

            using (var session = sessionFactory.OpenStatelessSession())
            using (var transaction = session.BeginTransaction(System.Data.IsolationLevel.ReadCommitted))
            {

                for (var i = 0; i < AmountOfInserts; i++)
                {
                    var product = new ProductWithGuid()
                    {
                        Id = Guid.NewGuid(),
                        Name = "A very long productname",
                        Description = "A very long description of a product with a very long name",
                        Price = 22,
                        Category = "Books"
                    };
                    session.Insert(product);
                }

                transaction.Commit();
            }

            stopWatch.Stop();
            var result = stopWatch.ElapsedMilliseconds;
            Console.WriteLine("Total time (in milliseconds) for executing query: " + result);
        }

        private static void InsertProductWithIdGeneratedByDatabase(ISessionFactory sessionFactory, Stopwatch stopWatch)
        {
            Console.WriteLine("Start executing insert product with id generated by database.");
            stopWatch.Start();

            using (var session = sessionFactory.OpenStatelessSession())
            using (var transaction = session.BeginTransaction(System.Data.IsolationLevel.ReadCommitted))
            {
                for (var i = 0; i < AmountOfInserts; i++)
                {
                    var product = new Product()
                    {
                        Name = "A very long productname",
                        Description = "A very long description of a product with a very long name",
                        Price = 22,
                        Category = "Books"
                    };

                    session.Insert(product);
                }

                transaction.Commit();
            }

            stopWatch.Stop();

            var result = stopWatch.ElapsedMilliseconds;
            Console.WriteLine("Total time (milliseconds) for executing query: " + result);
        }
    }
}
